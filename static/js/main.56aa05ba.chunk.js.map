{"version":3,"sources":["types/SortType.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","helpers/getFilteredTodos.ts","index.tsx"],"names":["SortType","actions","todo","type","payload","query","status","todos","rootReducer","combineReducers","currentTodo","state","action","filter","ALL","store","createStore","useAppDispatch","useDispatch","useAppSelector","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoList","selectedTodoId","setIsModalShowed","dispatch","className","map","id","title","completed","classNames","onClick","currentTodoActions","TodoFilter","sortType","onSubmit","event","preventDefault","onChange","filterActions","target","value","ACTIVE","COMPLETED","placeholder","length","style","pointerEvents","Loader","TodoModal","selectedTodo","useState","isLoading","setIsLoading","selectedUser","setSelectedUser","userId","useEffect","getUser","response","finally","name","email","href","App","isModalShowed","filteredTodos","visibleTodos","toLowerCase","includes","getFilteredTodos","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56aa05ba.chunk.js","sourcesContent":["export enum SortType {\n  ALL = 'All',\n  ACTIVE = 'Active',\n  COMPLETED = 'Completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype SetTodoAction = { type: 'currentTodo/SET', payload: Todo };\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nexport const currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n","import { SortType } from '../types/SortType';\n\ntype SetFilterAction = {\n  type: 'filterAction/SET',\n  payload: {\n    query: string,\n    status: SortType,\n  },\n};\n\ntype RemoveFilterAction = {\n  type: 'filterAction/REMOVE',\n  payload: {\n    status: SortType,\n  },\n};\n\nconst setFilter = (\n  query: string,\n  status: SortType,\n): SetFilterAction => ({\n  type: 'filterAction/SET',\n  payload: {\n    query,\n    status,\n  },\n});\n\nconst removeFilter = (status: SortType): RemoveFilterAction => ({\n  type: 'filterAction/REMOVE',\n  payload: {\n    status,\n  },\n});\n\nexport const actions = { setFilter, removeFilter };\n\ntype State = { query: string, status: SortType };\ntype Action = SetFilterAction | RemoveFilterAction;\n\nexport const filterReducer = (\n  state: State = { query: '', status: SortType.ALL },\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filterAction/SET': {\n      return {\n        query: action.payload.query,\n        status: action.payload.status,\n      };\n    }\n\n    case 'filterAction/REMOVE': {\n      return {\n        query: '',\n        status: action.payload.status,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'todosAction/SET', payload: Todo[] };\ntype RemoveTodosAction = { type: 'todosAction/REMOVE' };\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todosAction/SET',\n  payload: todos,\n});\n\nconst removeTodos = (): RemoveTodosAction => ({\n  type: 'todosAction/REMOVE',\n});\n\nexport const actions = { setTodos, removeTodos };\n\ntype Action = SetTodosAction | RemoveTodosAction;\n\nexport const todosReducer = (\n  state: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todosAction/SET': {\n      return action.payload;\n    }\n\n    case 'todosAction/REMOVE': {\n      return [];\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { createStore, combineReducers } from 'redux';\n\nimport { currentTodoReducer } from '../features/currentTodo';\nimport { filterReducer } from '../features/filter';\nimport { todosReducer } from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(rootReducer);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodoId: number,\n  setIsModalShowed: (param: boolean) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  setIsModalShowed,\n}) => {\n  const dispatch = useAppDispatch();\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const { id, title, completed } = todo;\n\n          return (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': selectedTodoId === id,\n              })}\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={classNames({\n                    'has-text-danger': !completed,\n                    'has-text-success': completed,\n                  })}\n                >\n                  {title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(currentTodoActions.setTodo(todo));\n                    setIsModalShowed(true);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={classNames(\n                        'far',\n                        {\n                          'fa-eye': selectedTodoId !== id,\n                          'fa-eye-slash': selectedTodoId === id,\n                        },\n                      )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { SortType } from '../../types/SortType';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const query = useAppSelector(state => state.filter.query);\n  const sortType = useAppSelector(state => state.filter.status);\n\n  const hadnleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setFilter(query, event.target.value as SortType));\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setFilter(event.target.value, sortType));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={hadnleSelectChange}\n            value={sortType}\n          >\n            <option value={SortType.ALL}>All</option>\n            <option value={SortType.ACTIVE}>Active</option>\n            <option value={SortType.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInputChange}\n        />\n\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query.length !== 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.removeFilter(sortType))}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\n\nimport { useAppDispatch } from '../../app/hooks';\n\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\nimport { Loader } from '../Loader';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  selectedTodo: Todo,\n  setIsModalShowed: (param: boolean) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  setIsModalShowed,\n}) => {\n  const dispatch = useAppDispatch();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User>();\n\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = selectedTodo;\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getUser(userId)\n      .then(response => setSelectedUser(response))\n      .finally(() => setIsLoading(false));\n  }, [userId]);\n\n  const { name, email } = selectedUser || {};\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && (\n        <Loader />\n      )}\n\n      {!isLoading && selectedUser && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                dispatch(currentTodoActions.removeTodo());\n                setIsModalShowed(false);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${email}`}>\n                {name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Todo } from './types/Todo';\nimport { getFilteredTodos } from './helpers/getFilteredTodos';\nimport { actions as todosActions } from './features/todos';\nimport { getTodos } from './api';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const query = useAppSelector(state => state.filter.query);\n  const sortType = useAppSelector(state => state.filter.status);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isModalShowed, setIsModalShowed] = useState(false);\n\n  const filteredTodos = getFilteredTodos(todos, sortType, query);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(response => dispatch(todosActions.setTodos(response)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            {isLoading ? (\n              <Loader />\n            ) : (\n              <>\n                <h1 className=\"title\">Todos:</h1>\n\n                <div className=\"block\">\n                  <TodoFilter />\n                </div>\n\n                <div className=\"block\">\n                  {filteredTodos.length === 0 ? (\n                    <p className=\"notification is-warning\">\n                      There are no todos matching current filter criteria\n                    </p>\n                  ) : (\n                    <TodoList\n                      todos={filteredTodos}\n                      selectedTodoId={selectedTodo?.id || 0}\n                      setIsModalShowed={setIsModalShowed}\n                    />\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {isModalShowed && (\n        <TodoModal\n          selectedTodo={selectedTodo as Todo}\n          setIsModalShowed={setIsModalShowed}\n        />\n      )}\n    </>\n  );\n};\n","import { SortType } from '../types/SortType';\nimport { Todo } from '../types/Todo';\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  sortType: SortType,\n  query: string,\n) => {\n  let visibleTodos = [...todos];\n\n  switch (sortType) {\n    case SortType.ACTIVE: {\n      visibleTodos = visibleTodos.filter(todo => todo.completed === false);\n      break;\n    }\n\n    case SortType.COMPLETED: {\n      visibleTodos = visibleTodos.filter(todo => todo.completed);\n      break;\n    }\n\n    case SortType.ALL:\n    default: {\n      break;\n    }\n  }\n\n  if (query) {\n    visibleTodos = visibleTodos\n      .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n  }\n\n  return visibleTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}